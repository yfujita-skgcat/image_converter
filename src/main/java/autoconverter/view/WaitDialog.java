/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * WaitDialog.java
 *
 * Created on 2012/02/01, 13:08:45
 */
package autoconverter.view;

import java.io.File;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import autoconverter.controller.AutoConverterUtils;
import autoconverter.controller.ProgressListener;
import autoconverter.model.ImageSet;

/**
 *
 * @author yfujita
 */
public class WaitDialog extends javax.swing.JDialog {

  public static final int DONE = 1;
  private SwingWorker<String, String> worker;
  private static Logger logger = AutoConverterUtils.getLogger();
  private String srcPath;
  private ImageSet images;
  private final boolean recursive;
  private int counter;

  /** Creates new form WaitDialog */
  public WaitDialog(java.awt.Frame parent, boolean modal, boolean _recursive) {
    super(parent, modal);
    initComponents();

    recursive = _recursive;
    images = new ImageSet();
    worker = new SwingWorker<String, String>() {

      private ArrayList<File> imageList;

      @Override
      protected String doInBackground() throws Exception {
        //for (int i = 0; i < 20; i++) {
        //  Thread.sleep(1000);
        //  publish(String.valueOf(i));
        //}
        imageList = recursiveSearch(new File(srcPath));
        //if (imageList.size() == 0) {
        //  JOptionPane.showMessageDialog(null, "Tiff file not found in \"" + srcPath + "\"", "File not found",
        //          JOptionPane.ERROR_MESSAGE);
        //  return null;
        //}
				Collections.sort(imageList);
				for (Iterator<File> it = imageList.iterator(); it.hasNext();) {
					File f = it.next();
					images.addFile(f);
				}
				/*
        for (File f : imageList) {
          images.addFile(f);
        }
				*/
        /*
        while (images.hasNext()) {
        ArrayList<CaptureImage> _shot = images.nextShot();
        String _shotID = _shot.get(0).getShotID();
        logger.fine("image ID=" + _shotID);
        for (CaptureImage _cimg : _shot) {
        logger.fine(_cimg.getFile().getAbsolutePath());
        }
        }
         */
        return "DONE";
      }

      @Override
      protected void process(List<String> _list) {
        for (String s : _list) {
          //waitDialogInformationArea.append(s + "\n");
          waitDialogInformationLabel.setText(s + " files were found.");
        }
      }

      @Override
      protected void done() {
        waitDialogInformationArea.append("DONE");
        if (this.isCancelled()) {
          logger.fine("Canceled.");
          images.clear();
        } else {
          logger.fine("DONE");
        }
        dispose();
      }

      /**
       * WaitDialog.recursive によって再帰検索か単純検索かを決定してFileのリストを返す.
       */
      public ArrayList<File> recursiveSearch(File top) throws InterruptedException {
        ArrayList<File> list = new ArrayList();
        String[] contents = top.list();
        for (int i = 0; i < contents.length; i++) {
          if (Thread.interrupted()) {
            throw new InterruptedException();
          }
          File sdir = new File(top, contents[i]);
          if (sdir.isDirectory() && recursive) {
            list.addAll(recursiveSearch(sdir));
            continue;
          }
          if (sdir.getName().matches(".*\\.(tif|TIF|tiff|TIFF)")) {
            if (!sdir.getName().matches("_thumb_")) {
              //publish(sdir.getAbsolutePath());
              counter++;
              publish(String.valueOf(counter));
              list.add(sdir);
            }
          } else {
            logger.fine(sdir.getAbsolutePath() + " is not tiff file");
          }
        }
        return list;
      }
    };
    worker.addPropertyChangeListener(new ProgressListener(progressBar));
  }

  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                waitDialogInformationLabel = new javax.swing.JLabel();
                jPanel1 = new javax.swing.JPanel();
                jButton1 = new javax.swing.JButton();
                progressBar = new javax.swing.JProgressBar();
                jScrollPane1 = new javax.swing.JScrollPane();
                waitDialogInformationArea = new javax.swing.JTextArea();

                setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

                waitDialogInformationLabel.setText("File Search and processing...");
                getContentPane().add(waitDialogInformationLabel, java.awt.BorderLayout.PAGE_START);

                jPanel1.setLayout(new java.awt.BorderLayout());

                jButton1.setText("Cancel");
                jPanel1.add(jButton1, java.awt.BorderLayout.PAGE_END);
                jPanel1.add(progressBar, java.awt.BorderLayout.CENTER);

                getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

                waitDialogInformationArea.setColumns(20);
                waitDialogInformationArea.setRows(5);
                jScrollPane1.setViewportView(waitDialogInformationArea);

                getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

                pack();
        }// </editor-fold>//GEN-END:initComponents

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
     */
    try {
      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
        if ("Nimbus".equals(info.getName())) {
          javax.swing.UIManager.setLookAndFeel(info.getClassName());
          break;
        }
      }
    } catch (ClassNotFoundException ex) {
      java.util.logging.Logger.getLogger(WaitDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (InstantiationException ex) {
      java.util.logging.Logger.getLogger(WaitDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (IllegalAccessException ex) {
      java.util.logging.Logger.getLogger(WaitDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    } catch (javax.swing.UnsupportedLookAndFeelException ex) {
      java.util.logging.Logger.getLogger(WaitDialog.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
    }
    //</editor-fold>
    //</editor-fold>

    /* Create and display the dialog */
    java.awt.EventQueue.invokeLater(new Runnable() {

      public void run() {
        WaitDialog dialog = new WaitDialog(new javax.swing.JFrame(), true, true);
        dialog.addWindowListener(new java.awt.event.WindowAdapter() {

          @Override
          public void windowClosing(java.awt.event.WindowEvent e) {
            System.exit(0);
          }
        });
        dialog.setVisible(true);
      }
    });
  }

  public ImageSet getImageSet(String _srcPath) {

    srcPath = _srcPath;

    /*
     * set imageSet in this thread
     * srcPath MUST be set before start worker thread.
     */
    if (worker != null) {
      worker.execute();
    }

    if (SwingUtilities.isEventDispatchThread()) {
      this.setVisible(true); // block here!
    } else {
      logger.severe("Not EventDispatchThread!!");
    }

    return images;
  }
        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JButton jButton1;
        private javax.swing.JPanel jPanel1;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JProgressBar progressBar;
        private javax.swing.JTextArea waitDialogInformationArea;
        private javax.swing.JLabel waitDialogInformationLabel;
        // End of variables declaration//GEN-END:variables
}
